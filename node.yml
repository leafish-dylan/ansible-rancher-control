- name: Fail if OS distro is not Ubuntu 14.04
  fail: 
      msg="The role is designed only for Ubuntu 14.04"
  when: "{{ ansible_distribution_version | version_compare('14.04', '!=') }}"

- name: Install dependencies
  apt: 
      name={{ item }} 
      update_cache=yes
  with_items: 
      - python-dev
      - python-setuptools

- name: Install pip
  easy_install: 
      name=pip 

- name: Install docker-py
  pip: 
      name=docker-py 
      state=present
      version=1.1.0

- name: Add docker apt repo
  apt_repository:
      repo='deb https://apt.dockerproject.org/repo ubuntu-{{ ansible_distribution_release }} main'
      state=present

- name: Import the Docker repository key
  apt_key:
      url=https://apt.dockerproject.org/gpg
      state=present
      id=2C52609D

- name: Install Docker package
  apt:
      name=docker-engine
      update_cache=yes
- name: Create a docker group
  group: 
      name=docker 
      state=present

- name: Add user(s) to docker group
  user: 
      name={{ item }} 
      group=docker 
      state=present
  with_items: docker_users
  when: docker_users is defined

- name: Configure Docker 
  template: 
      src=default_docker.j2 
      dest=/etc/default/docker 
      mode=0644 
      owner=root 
      group=root
  notify: restart docker

# Docker Upstart and SysVinit configuration file

# Use DOCKER_OPTS to modify the daemon startup options.
{% if docker_opts is defined %}
DOCKER_OPTS="{{ docker_opts | join(' ')}}"
{% endif %}

- name: Install httplib2
  apt:
      name=python-httplib2
      update_cache=yes

- name: Get the default project id
   action: uri
       method=GET
       status_code=200
       url="http://{{ lookup('env','RANCHER_SERVER') }}:{{ lookup('env','RANCHER_PORT') }}/v1/projects" return_content=yes
   register: project_id

- name: Return the registration token URL of Rancher server
  action: uri 
      method=POST
      status_code=201
      url="http://{{ lookup('env','RANCHER_SERVER') }}:{{ lookup('env','RANCHER_PORT') }}/v1/registrationtokens?projectId={{ project_id.json['data'][0]['id'] }}" return_content=yes
  register: rancher_token_url

- name: Return the registration URL of Rancher server
  action: uri 
      method=GET 
      url={{ rancher_token_url.json['links']['self'] }} return_content=yes
  register: rancher_token

- name: Check if the rancher-agent is running
  command: docker ps -a
  register: containers

- name: Register the Host machine with the Rancher server
  docker:
      image: rancher/agent:v{{ lookup('env','RANCHER_AGENT_VERSION') }}
      privileged: yes
      detach: True
      volumes: /var/run/docker.sock:/var/run/docker.sock
      command: "{{ rancher_token.json['registrationUrl'] }}"
      state: started
  when: "{{ 'rancher-agent' not in containers.stdout }}"
